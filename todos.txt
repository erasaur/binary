add to discuss project:
segment.io
autoform?
check
velocity
audit-argument-checks
fastclick
publish composite
some form of alert thing
i18n (tap-i18n?)
move error messages to common place
collectionfs for avatars?
user roles?
send nice email to users after they sign up
take out body
fix route notFound (and update router)
add fetch to allow/deny
_uihooks ? https://github.com/meteor/meteor/blob/30fb11f1fa0227f1c0ec3eb30b7864ea3b2d210e/History.md#blaze-1
move stuff into packages

use iron router to store states? eg storing current topic id instead of using session, storing current tab instead of using session, etc.
FIX PAGINATION!

/** 
 * comment template
 * 
 */

include all nested reply boxes inside existing reply template.
removing the top level template should remove nested replies.
removing nested replies has no effect on top level template.


can use template.firstNode to access the top level template's info.
can use Blaze.render() to render a template, and can use Blaze.remove(view) to kill a reply template. (maybe store all the reply templates 'view' object open within an array, so the view can be removed)



Error 1:

---------------------------
|           | con comment | A
---------------------------
--------------------^------
|                replies  | B
---------------------------

adding a comment to A in the con column will cause it to become like:

---------------------------
|           | con comment | A
|           | con comment |
---------------------------
--------------------^------
|                replies  | B
---------------------------

when it should be like:

---------------------------
|           | con comment | A
---------------------------
--------------------^------
|                replies  | B
---------------------------
---------------------------
|           | con comment | A
---------------------------

in this state, when adding another con comment, there is a scrollTo error: 'newComment': TypeError: Cannot read property 'top' of undefined


Error 2:

SessionAmplify is reset when content dynamically appears

User A:

-----------------------------
| pro comment |             | A
-----------------------------
--------------------^--------
|                 replies   | B
-----------------------------

User B posts something inside box B

-----------------------------
| pro comment |             | A
-----------------------------
--------------------^--------
| new comment |   replies   | B
-----------------------------

User A sees this:

-----------------------------
| pro comment | new comment | A
-----------------------------
--------------------^--------
| new comment |   replies   | B
-----------------------------

---------------------------------------------------------------------- TODO -------------------------------------------------------------------------
is session.set('currenttopic') necessary? - needed for accessing topic for posting replies (data context is comment), but can possibly just get the current route's params (Router.current().params._id = topic id)
salt emails before hashing to prevent gravatar security leak

replace unicode with downloaded font/font awesome (eg the search bar "x")
is this.userId already available in publish?

sanitation for markdown
use sessions only for variables that should be global, otherwise use deps or reactive var

use router controllers ?
implement notifications
em vs px
color left border of topicItem based on pro > con / con > pro
searching topics pro/con icons should be fixed width
auth certain pages
better way to do form alerts (home/signup modals)


implement use of enter to submit forms (maybe not for sign up form -- less risk of bots signing up? add captcha maybe?)
make a footer type thing (some space from the bottom)
idToCollection function in helpers -- is it slow to pass collection as parameter?

edit/remove comments, edit/remove topics

infinite scrolling for comments
forgot password feature
test cross-browser functionality
optimize structure of database
fix up css make it better
SEO
benchmark website


---------------------------------------------------------------------- DONE -------------------------------------------------------------------------
sorting by popular, newest, etc. for newest, might be best not to do auto-updates -- comments keep moving around too much
test the router for loading template, not found template, etc. need to do subscriptions for notfound template
improve topics.js vote function
sanitize all inputs (newComment, newTopic, etc.)
meteor permissions (allow, deny, etc)
what happens if comments shift while a replybox is shown? (eg a comment suddenly becomes more popular and displaces it at the top)
meteor stubs -- have meteor methods on client and server (see discover meteor)
- sync client/server side collections
optimize pub/subs (see discover meteor)
deal with newFollower methods and followTopic methods
fix drawing glitch in chrome when opening replies for the last comment of a reply box (seems to be resolved by border radius)
for routes to topic/user, publish the cursor rather than an object with the cursor
add comment ids to comment replies array
combine publications (eg profileUser, can publish user and topics and comments at once)
separate events/helpers into individual files (see discover meteor)
fade modal background when clicking a link inside it (search box)
get the main content column to span full height
possibly: for the replies helper: show only the replies that are also in Session.get("showingReplies") array. or come up with some other way to make the shown replies only for current browser, not for global. right now it's global b/c it's taking all replies that has replyTo some id.
searching topics
fix: don't show comments that are already shown as replies.
scrollTo new comment -- make sure to choose only the closest one (get current comment, pass as a param perhaps)
- potential error if using replies box in anyway (replies box is removed if it is the last row)
one client's updates screw up another client's layout. test on multiple browsers
move followers, following, followingtopics etc not very important for security stuff into profile, so we don't have to publish so many fields?
all website content should have same z index as the page header, otherwise navbar covers it
optimize jquery selectors ("div.class"). can use id's for replies now, since no duplicate comments allowed at same time. scrollTo function also can use id's
optimize subscription/publications -- only publish needed documents, not the entire database (which would take a lot of time/memory)
be consistent with database -- use id or username to store relationships?? eg owner, comment's "topic"
- better to move to _id's, if we want to allow users to change their username in the future.


<template name="commentRow">
<tr>
<td>{{> comment pros}}</td>
<td>{{> comment cons}}</td>
</tr>

{{#if showingReplies}} //check if the pro or con comment has class "showing-replies"
{{> commentRow}} //pros: CommentsModel.find({"replyTo": event.target.id, "side": pro}) where event.target.id is the id of the comment whose "toggle replies" was clicked
{{/if}}
</template>

<template name="commentRow">
<tr>
<td>{{> comment pros}}</td>
<td>{{> comment cons}}</td>
</tr>

{{#if showingProReplies}} //check if the pro comment has class "showing-replies"
{{> commentRow}} //pros: CommentsModel.find({"replyTo": event.target.id, "side": pro}) where event.target.id is the id of the comment whose "toggle replies" was clicked
{{/if}}
{{#if showingConRplies}}
	same thing
{{/if}}
</template>

------ database info -----
users:
- username
- email
- password
- profile
- notifications
	- commentReply (notifications received when users reply to their comment)
	- followingUser (notifications received for activity regarding user they are following)
	- followingTopic (notifications received for activity in topic they are following)
- activity
	- likes (the number of likes received -- reputation)
	- liked (the comments they liked)
	- following (users they are following)
	- followers (users following them)
	- followingTopics (topics they are following)
	- topics (that the user had participated in)

topics:
- _id (automatically created)
- title
- owner [username]
- date (of creation)
- pro (count) [allow increment only if logged in]
- con (count)
~later - users [by username] (users who have commented on the topic)

comments:
- _id (automatically created)
- owner [username]
- topic (in which comment is posted)
- date (of creation)
- content
- side ("pro" or "con")
- likes
- replyTo [_id] (the comment this is replying to -- only if this is a reply)
- replies [_id] (comments replying to this)